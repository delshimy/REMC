.TH "lo_types.h" 3 "Thu May 23 2013" "Version 0.26" "liblo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lo_types.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void * \fBlo_address\fP"
.br
.RI "\fIA reference to an OSC service\&. \fP"
.ti -1c
.RI "typedef void * \fBlo_blob\fP"
.br
.RI "\fIA object to store an opaque binary data object\&. \fP"
.ti -1c
.RI "typedef void * \fBlo_message\fP"
.br
.RI "\fIA low-level object used to represent messages passed over OSC\&. \fP"
.ti -1c
.RI "typedef void * \fBlo_bundle\fP"
.br
.RI "\fIA low-level object used to represent bundles of messages passed over OSC\&. \fP"
.ti -1c
.RI "typedef void * \fBlo_method\fP"
.br
.RI "\fIAn object representing an method on a server\&. \fP"
.ti -1c
.RI "typedef void * \fBlo_server\fP"
.br
.RI "\fIAn object representing an instance of an OSC server\&. \fP"
.ti -1c
.RI "typedef void * \fBlo_server_thread\fP"
.br
.RI "\fIAn object representing a thread containing an OSC server\&. \fP"
.ti -1c
.RI "typedef void(* \fBlo_err_handler\fP )(int num, const char *msg, const char *where)"
.br
.RI "\fIA callback function to receive notifcation of an error in a server or server thread\&. \fP"
.ti -1c
.RI "typedef int(* \fBlo_method_handler\fP )(const char *path, const char *types, \fBlo_arg\fP **argv, int argc, \fBlo_message\fP msg, void *user_data)"
.br
.RI "\fIA callback function to receive notifcation of matching message arriving in the server or server thread\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The liblo headerfile defining types used by this API\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef void* \fBlo_address\fP"
.PP
A reference to an OSC service\&. Created by calls to \fBlo_address_new()\fP or \fBlo_address_new_from_url()\fP\&. 
.SS "typedef void* \fBlo_blob\fP"
.PP
A object to store an opaque binary data object\&. Can be passed over OSC using the 'b' type\&. Created by calls to \fBlo_blob_new()\fP\&. 
.SS "typedef void* \fBlo_bundle\fP"
.PP
A low-level object used to represent bundles of messages passed over OSC\&. Created by calls to \fBlo_bundle_new()\fP, messages can be added with calls to \fBlo_bundle_add_message()\fP\&. 
.SS "typedef void(* \fBlo_err_handler\fP)(int num, const char *msg, const char *where)"
.PP
A callback function to receive notifcation of an error in a server or server thread\&. On callback the paramters will be set to the following values:
.PP
\fBParameters:\fP
.RS 4
\fInum\fP An error number that can be used to identify this condition\&. 
.br
\fImsg\fP An error message describing the condidtion\&. 
.br
\fIwhere\fP A string describing the place the error occured - typically either a function call or method path\&. 
.RE
.PP

.SS "typedef void* \fBlo_message\fP"
.PP
A low-level object used to represent messages passed over OSC\&. Created by calls to \fBlo_message_new()\fP, arguments can be added with calls to lo_message_add_*()\&. 
.SS "typedef void* \fBlo_method\fP"
.PP
An object representing an method on a server\&. Returned by calls to \fBlo_server_thread_add_method()\fP and \fBlo_server_add_method()\fP\&. 
.SS "typedef int(* \fBlo_method_handler\fP)(const char *path, const char *types, \fBlo_arg\fP **argv, int argc, \fBlo_message\fP msg, void *user_data)"
.PP
A callback function to receive notifcation of matching message arriving in the server or server thread\&. The return value tells the method dispatcher whether this handler has dealt with the message correctly: a return value of 0 indicates that it has been handled, and it should not attempt to pass it on to any other handlers, non-0 means that it has not been handled and the dispatcher will attempt to find more handlers that match the path and types of the incoming message\&.
.PP
On callback the paramters will be set to the following values:
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP That path that the incoming message was sent to 
.br
\fItypes\fP If you specided types in your method creation call then this will match those and the incoming types will have been coerced to match, otherwise it will be the types of the arguments of the incoming message\&. 
.br
\fIargv\fP An array of \fBlo_arg\fP types containing the values, e\&.g\&. if the first argument of the incoming message is of type 'f' then the vlaue will be found in argv[0]->f\&. 
.br
\fIargc\fP The number of argumets received\&. 
.br
\fImsg\fP A structure containing the original raw message as received\&. No type coercion will have occured and the data will be in OSC byte order (bigendian)\&. 
.br
\fIuser_data\fP This contains the user_data value passed in the call to lo_server_thread_add_method\&. 
.RE
.PP

.SS "typedef void* \fBlo_server\fP"
.PP
An object representing an instance of an OSC server\&. Created by calls to \fBlo_server_new()\fP\&. If you with the library to take care of the threading as well you can just use server threads instead\&. 
.SS "typedef void* \fBlo_server_thread\fP"
.PP
An object representing a thread containing an OSC server\&. Created by calls to \fBlo_server_thread_new()\fP\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblo from the source code\&.
