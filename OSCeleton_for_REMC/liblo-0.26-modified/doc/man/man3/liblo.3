.TH "High-level OSC API" 3 "Thu May 23 2013" "Version 0.26" "liblo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
High-level OSC API \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlo_timetag\fP"
.br
.RI "\fIA structure to store OSC TimeTag values\&. \fP"
.ti -1c
.RI "union \fBlo_arg\fP"
.br
.RI "\fIUnion used to read values from incoming messages\&. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBLO_TT_IMMEDIATE\fP   ((\fBlo_timetag\fP){0U,1U})"
.br
.RI "\fIA timetag constant representing 'now'\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBlo_type\fP { \fBLO_INT32\fP =  'i', \fBLO_FLOAT\fP =  'f', \fBLO_STRING\fP =  's', \fBLO_BLOB\fP =  'b', \fBLO_INT64\fP =  'h', \fBLO_TIMETAG\fP =  't', \fBLO_DOUBLE\fP =  'd', \fBLO_SYMBOL\fP =  'S', \fBLO_CHAR\fP =  'c', \fBLO_MIDI\fP =  'm', \fBLO_TRUE\fP =  'T', \fBLO_FALSE\fP =  'F', \fBLO_NIL\fP =  'N', \fBLO_INFINITUM\fP =  'I' }"
.br
.RI "\fIAn enumeration of the OSC types liblo can send and receive\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBlo_address\fP \fBlo_address_new\fP (const char *host, const char *port)"
.br
.RI "\fIDeclare an OSC destination, given IP address and port number\&. Same as \fBlo_address_new_with_proto()\fP, but using UDP\&. \fP"
.ti -1c
.RI "\fBlo_address\fP \fBlo_address_new_with_proto\fP (int proto, const char *host, const char *port)"
.br
.RI "\fIDeclare an OSC destination, given IP address and port number, specifying protocol\&. \fP"
.ti -1c
.RI "\fBlo_address\fP \fBlo_address_new_from_url\fP (const char *url)"
.br
.RI "\fICreate a lo_address object from an OSC URL\&. \fP"
.ti -1c
.RI "void \fBlo_address_free\fP (\fBlo_address\fP t)"
.br
.RI "\fIFree the memory used by the lo_address object\&. \fP"
.ti -1c
.RI "void \fBlo_address_set_ttl\fP (\fBlo_address\fP t, int ttl)"
.br
.RI "\fISet the Time-to-Live value for a given target address\&. \fP"
.ti -1c
.RI "int \fBlo_address_get_ttl\fP (\fBlo_address\fP t)"
.br
.RI "\fIGet the Time-to-Live value for a given target address\&. \fP"
.ti -1c
.RI "int \fBlo_send\fP (\fBlo_address\fP targ, const char *path, const char *type,\&.\&.\&.)"
.br
.RI "\fISend a OSC formatted message to the address specified\&. \fP"
.ti -1c
.RI "int \fBlo_send_from\fP (\fBlo_address\fP targ, \fBlo_server\fP from, \fBlo_timetag\fP ts, const char *path, const char *type,\&.\&.\&.)"
.br
.RI "\fISend a OSC formatted message to the address specified, from the same socket as the specificied server\&. \fP"
.ti -1c
.RI "int \fBlo_send_timestamped\fP (\fBlo_address\fP targ, \fBlo_timetag\fP ts, const char *path, const char *type,\&.\&.\&.)"
.br
.RI "\fISend a OSC formatted message to the address specified, scheduled to be dispatch at some time in the future\&. \fP"
.ti -1c
.RI "int \fBlo_address_errno\fP (\fBlo_address\fP a)"
.br
.RI "\fIReturn the error number from the last failed \fBlo_send()\fP or \fBlo_address_new()\fP call\&. \fP"
.ti -1c
.RI "const char * \fBlo_address_errstr\fP (\fBlo_address\fP a)"
.br
.RI "\fIReturn the error string from the last failed \fBlo_send()\fP or \fBlo_address_new()\fP call\&. \fP"
.ti -1c
.RI "\fBlo_server_thread\fP \fBlo_server_thread_new\fP (const char *port, \fBlo_err_handler\fP err_h)"
.br
.RI "\fICreate a new server thread to handle incoming OSC messages\&. \fP"
.ti -1c
.RI "\fBlo_server_thread\fP \fBlo_server_thread_new_multicast\fP (const char *group, const char *port, \fBlo_err_handler\fP err_h)"
.br
.RI "\fICreate a new server thread to handle incoming OSC messages, and join a UDP multicast group\&. \fP"
.ti -1c
.RI "\fBlo_server_thread\fP \fBlo_server_thread_new_with_proto\fP (const char *port, int proto, \fBlo_err_handler\fP err_h)"
.br
.RI "\fICreate a new server thread to handle incoming OSC messages, specifying protocol\&. \fP"
.ti -1c
.RI "void \fBlo_server_thread_free\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIFree memory taken by a server thread\&. \fP"
.ti -1c
.RI "\fBlo_method\fP \fBlo_server_thread_add_method\fP (\fBlo_server_thread\fP st, const char *path, const char *typespec, \fBlo_method_handler\fP h, void *user_data)"
.br
.RI "\fIAdd an OSC method to the specifed server thread\&. \fP"
.ti -1c
.RI "void \fBlo_server_thread_del_method\fP (\fBlo_server_thread\fP st, const char *path, const char *typespec)"
.br
.RI "\fIDelete an OSC method from the specifed server thread\&. \fP"
.ti -1c
.RI "int \fBlo_server_thread_start\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIStart the server thread\&. \fP"
.ti -1c
.RI "int \fBlo_server_thread_stop\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIStop the server thread\&. \fP"
.ti -1c
.RI "int \fBlo_server_thread_get_port\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn the port number that the server thread has bound to\&. \fP"
.ti -1c
.RI "char * \fBlo_server_thread_get_url\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn a URL describing the address of the server thread\&. \fP"
.ti -1c
.RI "\fBlo_server\fP \fBlo_server_thread_get_server\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn the lo_server for a lo_server_thread\&. \fP"
.ti -1c
.RI "int \fBlo_server_thread_events_pending\fP (\fBlo_server_thread\fP st)"
.br
.RI "\fIReturn true if there are scheduled events (eg\&. from bundles) waiting to be dispatched by the thread\&. \fP"
.ti -1c
.RI "\fBlo_blob\fP \fBlo_blob_new\fP (int32_t size, const void *data)"
.br
.RI "\fICreate a new OSC blob type\&. \fP"
.ti -1c
.RI "void \fBlo_blob_free\fP (\fBlo_blob\fP b)"
.br
.RI "\fIFree the memory taken by a blob\&. \fP"
.ti -1c
.RI "uint32_t \fBlo_blob_datasize\fP (\fBlo_blob\fP b)"
.br
.RI "\fIReturn the amount of valid data in a lo_blob object\&. \fP"
.ti -1c
.RI "void * \fBlo_blob_dataptr\fP (\fBlo_blob\fP b)"
.br
.RI "\fIReturn a pointer to the start of the blob data to allow contents to be changed\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Defines the high-level API functions necessary to implement OSC support\&. Should be adequate for most applications, but if you require lower level control you can use the functions defined in \fBlo_lowlevel\&.h\fP 
.SH "Define Documentation"
.PP 
.SS "#define \fBLO_TT_IMMEDIATE\fP   ((\fBlo_timetag\fP){0U,1U})"
.PP
A timetag constant representing 'now'\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBlo_type\fP"
.PP
An enumeration of the OSC types liblo can send and receive\&. The value of the enumeration is the typechar used to tag messages and to specify arguments with \fBlo_send()\fP\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fILO_INT32 \fP\fP
32 bit signed integer\&. 
.TP
\fB\fILO_FLOAT \fP\fP
32 bit IEEE-754 float\&. 
.TP
\fB\fILO_STRING \fP\fP
Standard C, NULL terminated string\&. 
.TP
\fB\fILO_BLOB \fP\fP
OSC binary blob type\&. Accessed using the lo_blob_*() functions\&. 
.TP
\fB\fILO_INT64 \fP\fP
64 bit signed integer\&. 
.TP
\fB\fILO_TIMETAG \fP\fP
OSC TimeTag type, represented by the \fBlo_timetag\fP structure\&. 
.TP
\fB\fILO_DOUBLE \fP\fP
64 bit IEEE-754 double\&. 
.TP
\fB\fILO_SYMBOL \fP\fP
Standard C, NULL terminated, string\&. Used in systems which distinguish strings and symbols\&. 
.TP
\fB\fILO_CHAR \fP\fP
Standard C, 8 bit, char variable\&. 
.TP
\fB\fILO_MIDI \fP\fP
A 4 byte MIDI packet\&. 
.TP
\fB\fILO_TRUE \fP\fP
Sybol representing the value True\&. 
.TP
\fB\fILO_FALSE \fP\fP
Sybol representing the value False\&. 
.TP
\fB\fILO_NIL \fP\fP
Sybol representing the value Nil\&. 
.TP
\fB\fILO_INFINITUM \fP\fP
Sybol representing the value Infinitum\&. 
.SH "Function Documentation"
.PP 
.SS "int \fBlo_address_errno\fP (\fBlo_address\fPa)"
.PP
Return the error number from the last failed \fBlo_send()\fP or \fBlo_address_new()\fP call\&. 
.SS "const char* \fBlo_address_errstr\fP (\fBlo_address\fPa)"
.PP
Return the error string from the last failed \fBlo_send()\fP or \fBlo_address_new()\fP call\&. 
.SS "void \fBlo_address_free\fP (\fBlo_address\fPt)"
.PP
Free the memory used by the lo_address object\&. 
.SS "int \fBlo_address_get_ttl\fP (\fBlo_address\fPt)"
.PP
Get the Time-to-Live value for a given target address\&. \fBParameters:\fP
.RS 4
\fIt\fP An OSC address\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer specifying the scope of a multicast UDP message\&. 
.RE
.PP

.SS "\fBlo_address\fP \fBlo_address_new\fP (const char *host, const char *port)"
.PP
Declare an OSC destination, given IP address and port number\&. Same as \fBlo_address_new_with_proto()\fP, but using UDP\&. \fBParameters:\fP
.RS 4
\fIhost\fP An IP address or number, or NULL for the local machine\&. 
.br
\fIport\fP a decimal port number or service name\&.
.RE
.PP
The lo_address object may be used as the target of OSC messages\&.
.PP
Note: if you wish to receive replies from the target of this address, you must first create a lo_server_thread or lo_server object which will receive the replies\&. The last lo_server(_thread) object creted will be the receiver\&. 
.SS "\fBlo_address\fP \fBlo_address_new_from_url\fP (const char *url)"
.PP
Create a lo_address object from an OSC URL\&. example: \fC'osc\&.udp://localhost:4444/my/path/'\fP 
.SS "\fBlo_address\fP \fBlo_address_new_with_proto\fP (intproto, const char *host, const char *port)"
.PP
Declare an OSC destination, given IP address and port number, specifying protocol\&. \fBParameters:\fP
.RS 4
\fIproto\fP The protocol to use, must be one of LO_UDP, LO_TCP or LO_UNIX\&. 
.br
\fIhost\fP An IP address or number, or NULL for the local machine\&. 
.br
\fIport\fP a decimal port number or service name\&.
.RE
.PP
The lo_address object may be used as the target of OSC messages\&.
.PP
Note: if you wish to receive replies from the target of this address, you must first create a lo_server_thread or lo_server object which will receive the replies\&. The last lo_server(_thread) object creted will be the receiver\&. 
.SS "void \fBlo_address_set_ttl\fP (\fBlo_address\fPt, intttl)"
.PP
Set the Time-to-Live value for a given target address\&. This is required for sending multicast UDP messages\&. A value of 1 (the usual case) keeps the message within the subnet, while 255 means a global, unrestricted scope\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP An OSC address\&. 
.br
\fIttl\fP An integer specifying the scope of a multicast UDP message\&. 
.RE
.PP

.SS "void* \fBlo_blob_dataptr\fP (\fBlo_blob\fPb)"
.PP
Return a pointer to the start of the blob data to allow contents to be changed\&. 
.SS "uint32_t \fBlo_blob_datasize\fP (\fBlo_blob\fPb)"
.PP
Return the amount of valid data in a lo_blob object\&. If you want to know the storage size, use \fBlo_arg_size()\fP\&. 
.SS "void \fBlo_blob_free\fP (\fBlo_blob\fPb)"
.PP
Free the memory taken by a blob\&. 
.SS "\fBlo_blob\fP \fBlo_blob_new\fP (int32_tsize, const void *data)"
.PP
Create a new OSC blob type\&. \fBParameters:\fP
.RS 4
\fIsize\fP The amount of space to allocate in the blob structure\&. 
.br
\fIdata\fP The data that will be used to initialise the blob, should be size bytes long\&. 
.RE
.PP

.SS "int \fBlo_send\fP (\fBlo_address\fPtarg, const char *path, const char *type, \&.\&.\&.)"
.PP
Send a OSC formatted message to the address specified\&. \fBParameters:\fP
.RS 4
\fItarg\fP The target OSC address 
.br
\fIpath\fP The OSC path the message will be delivered to 
.br
\fItype\fP The types of the data items in the message, types are defined in \fBlo_osc_types\&.h\fP 
.br
\fI\&.\&.\&.\fP The data values to be transmitted\&. The types of the arguments passed here must agree with the types specified in the type parameter\&.
.RE
.PP
example: 
.PP
.nf
 lo_send(t, '/foo/bar', 'ff', 0\&.1f, 23\&.0f);

.fi
.PP
.PP
\fBReturns:\fP
.RS 4
-1 on failure\&. 
.RE
.PP

.SS "int \fBlo_send_from\fP (\fBlo_address\fPtarg, \fBlo_server\fPfrom, \fBlo_timetag\fPts, const char *path, const char *type, \&.\&.\&.)"
.PP
Send a OSC formatted message to the address specified, from the same socket as the specificied server\&. \fBParameters:\fP
.RS 4
\fItarg\fP The target OSC address 
.br
\fIfrom\fP The server to send message from (can be NULL to use new socket) 
.br
\fIts\fP The OSC timetag timestamp at which the message will be processed (can be LO_TT_IMMEDIATE if you don't want to attach a timetag) 
.br
\fIpath\fP The OSC path the message will be delivered to 
.br
\fItype\fP The types of the data items in the message, types are defined in \fBlo_osc_types\&.h\fP 
.br
\fI\&.\&.\&.\fP The data values to be transmitted\&. The types of the arguments passed here must agree with the types specified in the type parameter\&.
.RE
.PP
example: 
.PP
.nf
 serv = lo_server_new(NULL, err);
 lo_server_add_method(serv, '/reply', 'ss', reply_handler, NULL);
 lo_send_from(t, serv, LO_TT_IMMEDIATE, '/foo/bar', 'ff', 0\&.1f, 23\&.0f);

.fi
.PP
.PP
\fBReturns:\fP
.RS 4
on success, the number of bytes sent, or -1 on failure\&. 
.RE
.PP

.SS "int \fBlo_send_timestamped\fP (\fBlo_address\fPtarg, \fBlo_timetag\fPts, const char *path, const char *type, \&.\&.\&.)"
.PP
Send a OSC formatted message to the address specified, scheduled to be dispatch at some time in the future\&. \fBParameters:\fP
.RS 4
\fItarg\fP The target OSC address 
.br
\fIts\fP The OSC timetag timestamp at which the message will be processed 
.br
\fIpath\fP The OSC path the message will be delivered to 
.br
\fItype\fP The types of the data items in the message, types are defined in \fBlo_osc_types\&.h\fP 
.br
\fI\&.\&.\&.\fP The data values to be transmitted\&. The types of the arguments passed here must agree with the types specified in the type parameter\&.
.RE
.PP
example: 
.PP
.nf
 lo_timetag now;<br>
 lo_timetag_now(&now);<br>
 lo_send_timestamped(t, now, '/foo/bar', 'ff', 0\&.1f, 23\&.0f);

.fi
.PP
.PP
\fBReturns:\fP
.RS 4
on success, the number of bytes sent, or -1 on failure\&. 
.RE
.PP

.SS "\fBlo_method\fP \fBlo_server_thread_add_method\fP (\fBlo_server_thread\fPst, const char *path, const char *typespec, \fBlo_method_handler\fPh, void *user_data)"
.PP
Add an OSC method to the specifed server thread\&. \fBParameters:\fP
.RS 4
\fIst\fP The server thread the method is to be added to\&. 
.br
\fIpath\fP The OSC path to register the method to\&. If NULL is passed the method will match all paths\&. 
.br
\fItypespec\fP The typespec the method accepts\&. Incoming messages with similar typespecs (e\&.g\&. ones with numerical types in the same position) will be coerced to the typespec given here\&. 
.br
\fIh\fP The method handler callback function that will be called it a matching message is received 
.br
\fIuser_data\fP A value that will be passed to the callback function, h, when its invoked matching from this method\&. 
.RE
.PP

.SS "void \fBlo_server_thread_del_method\fP (\fBlo_server_thread\fPst, const char *path, const char *typespec)"
.PP
Delete an OSC method from the specifed server thread\&. \fBParameters:\fP
.RS 4
\fIst\fP The server thread the method is to be removed from\&. 
.br
\fIpath\fP The OSC path of the method to delete\&. If NULL is passed the method will match the generic handler\&. 
.br
\fItypespec\fP The typespec the method accepts\&. 
.RE
.PP

.SS "int \fBlo_server_thread_events_pending\fP (\fBlo_server_thread\fPst)"
.PP
Return true if there are scheduled events (eg\&. from bundles) waiting to be dispatched by the thread\&. 
.SS "void \fBlo_server_thread_free\fP (\fBlo_server_thread\fPst)"
.PP
Free memory taken by a server thread\&. Frees the memory, and, if currently running will stop the associated thread\&. 
.SS "int \fBlo_server_thread_get_port\fP (\fBlo_server_thread\fPst)"
.PP
Return the port number that the server thread has bound to\&. 
.SS "\fBlo_server\fP \fBlo_server_thread_get_server\fP (\fBlo_server_thread\fPst)"
.PP
Return the lo_server for a lo_server_thread\&. This function is useful for passing a thread's lo_server to \fBlo_send_from()\fP\&. 
.SS "char* \fBlo_server_thread_get_url\fP (\fBlo_server_thread\fPst)"
.PP
Return a URL describing the address of the server thread\&. Return value must be free()'d to reclaim memory\&. 
.SS "\fBlo_server_thread\fP \fBlo_server_thread_new\fP (const char *port, \fBlo_err_handler\fPerr_h)"
.PP
Create a new server thread to handle incoming OSC messages\&. Server threads take care of the message reception and dispatch by transparently creating a system thread to handle incoming messages\&. Use this if you do not want to handle the threading yourself\&.
.PP
\fBParameters:\fP
.RS 4
\fIport\fP If NULL is passed then an unused port will be chosen by the system, its number may be retrieved with \fBlo_server_thread_get_port()\fP so it can be passed to clients\&. Otherwise a decimal port number, service name or UNIX domain socket path may be passed\&. 
.br
\fIerr_h\fP A function that will be called in the event of an error being raised\&. The function prototype is defined in \fBlo_types\&.h\fP 
.RE
.PP

.SS "\fBlo_server_thread\fP \fBlo_server_thread_new_multicast\fP (const char *group, const char *port, \fBlo_err_handler\fPerr_h)"
.PP
Create a new server thread to handle incoming OSC messages, and join a UDP multicast group\&. Server threads take care of the message reception and dispatch by transparently creating a system thread to handle incoming messages\&. Use this if you do not want to handle the threading yourself\&.
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP The multicast group to join\&. See documentation on IP multicast for the acceptable address range; e\&.g\&., http://tldp.org/HOWTO/Multicast-HOWTO-2.html 
.br
\fIport\fP If NULL is passed then an unused port will be chosen by the system, its number may be retrieved with \fBlo_server_thread_get_port()\fP so it can be passed to clients\&. Otherwise a decimal port number, service name or UNIX domain socket path may be passed\&. 
.br
\fIerr_h\fP A function that will be called in the event of an error being raised\&. The function prototype is defined in \fBlo_types\&.h\fP 
.RE
.PP

.SS "\fBlo_server_thread\fP \fBlo_server_thread_new_with_proto\fP (const char *port, intproto, \fBlo_err_handler\fPerr_h)"
.PP
Create a new server thread to handle incoming OSC messages, specifying protocol\&. Server threads take care of the message reception and dispatch by transparently creating a system thread to handle incoming messages\&. Use this if you do not want to handle the threading yourself\&.
.PP
\fBParameters:\fP
.RS 4
\fIport\fP If NULL is passed then an unused port will be chosen by the system, its number may be retrieved with \fBlo_server_thread_get_port()\fP so it can be passed to clients\&. Otherwise a decimal port number, service name or UNIX domain socket path may be passed\&. 
.br
\fIproto\fP The protocol to use, should be one of LO_UDP, LO_TCP or LO_UNIX\&. 
.br
\fIerr_h\fP A function that will be called in the event of an error being raised\&. The function prototype is defined in \fBlo_types\&.h\fP 
.RE
.PP

.SS "int \fBlo_server_thread_start\fP (\fBlo_server_thread\fPst)"
.PP
Start the server thread\&. \fBParameters:\fP
.RS 4
\fIst\fP the server thread to start\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Less than 0 on failure, 0 on success\&. 
.RE
.PP

.SS "int \fBlo_server_thread_stop\fP (\fBlo_server_thread\fPst)"
.PP
Stop the server thread\&. \fBParameters:\fP
.RS 4
\fIst\fP the server thread to start\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Less than 0 on failure, 0 on success\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for liblo from the source code\&.
